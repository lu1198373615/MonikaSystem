import numpy as np
from numpy.fft import fft, ifft
import matplotlib.pyplot as plt
from matplotlib.pylab import mpl


class ApFFTAlgorithm:
    def __init__(self):
        self.conv_win = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,
                                  5, 5, 6, 6, 6, 7, 8, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22,
                                  23, 24, 26, 27, 28, 30, 32, 33, 35, 37, 39, 41, 43, 45, 47, 49, 52, 54, 57, 59, 62,
                                  65, 67, 70, 73, 76, 80, 83, 86, 90, 93, 97, 100, 104, 108, 112, 116, 120, 125, 129,
                                  134, 138, 143, 148, 153, 158, 163, 168, 173, 179, 184, 190, 196, 201, 207, 213, 219,
                                  226, 232, 238, 245, 252, 258, 265, 272, 279, 286, 293, 301, 308, 315, 323, 330, 338,
                                  346, 354, 362, 370, 378, 386, 394, 402, 411, 419, 428, 436, 445, 453, 462, 471, 480,
                                  488, 497, 506, 515, 524, 533, 542, 551, 560, 569, 578, 587, 596, 605, 614, 623, 632,
                                  641, 650, 659, 668, 677, 686, 695, 704, 713, 721, 730, 739, 747, 756, 764, 772, 781,
                                  789, 797, 805, 813, 821, 828, 836, 844, 851, 858, 866, 873, 880, 886, 893, 900, 906,
                                  912, 919, 925, 930, 936, 942, 947, 952, 957, 962, 967, 971, 976, 980, 984, 988, 991,
                                  995, 998, 1001, 1004, 1007, 1009, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1022,
                                  1023, 1024, 1024, 1024, 1024, 1024, 1023, 1022, 1021, 1020, 1019, 1017, 1016, 1014,
                                  1012, 1009, 1007, 1004, 1001, 998, 995, 991, 988, 984, 980, 976, 971, 967, 962, 957,
                                  952, 947, 942, 936, 930, 925, 919, 912, 906, 900, 893, 886, 880, 873, 866, 858, 851,
                                  844, 836, 828, 821, 813, 805, 797, 789, 781, 772, 764, 756, 747, 739, 730, 721, 713,
                                  704, 695, 686, 677, 668, 659, 650, 641, 632, 623, 614, 605, 596, 587, 578, 569, 560,
                                  551, 542, 533, 524, 515, 506, 497, 488, 480, 471, 462, 453, 445, 436, 428, 419, 411,
                                  402, 394, 386, 378, 370, 362, 354, 346, 338, 330, 323, 315, 308, 301, 293, 286, 279,
                                  272, 265, 258, 252, 245, 238, 232, 226, 219, 213, 207, 201, 196, 190, 184, 179, 173,
                                  168, 163, 158, 153, 148, 143, 138, 134, 129, 125, 120, 116, 112, 108, 104, 100, 97,
                                  93, 90, 86, 83, 80, 76, 73, 70, 67, 65, 62, 59, 57, 54, 52, 49, 47, 45, 43, 41, 39,
                                  37, 35, 33, 32, 30, 28, 27, 26, 24, 23, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 12,
                                  11, 10, 9, 9, 8, 8, 7, 6, 6, 6, 5, 5, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
                                  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

    def apFFT(self, fi):
        x1 = fi[0:511] * self.conv_win
        x2 = x1[255:511] + np.hstack((0, x1[0:255]))
        hp = fft(x2, 256)
        ha = np.abs(hp)[0:128]
        point = np.where(ha == np.max(ha))[0]
        # print(point, hp[point[0]])
        return point, hp[point[0]]

    def time_shift_apFFT(self, fi):
        K1, Y1 = self.apFFT(fi[0:511])
        K2, Y2 = self.apFFT(fi[256:767])
        vv = Y2 * (np.real(Y1) - 1j*np.imag(Y1))
        # print(vv)
        coa = np.arctan2(np.imag(vv), np.real(vv)) / np.pi / 2
        return K1, coa

    def time_shift_apFFT_improved(self, fi):
        K1, coa1 = self.time_shift_apFFT(fi)
        if (np.abs(coa1)>0.1):
            fs = np.linspace(-383/256, 383/256, 767)
            fs = np.exp(-1j * 2 * coa1 * np.pi * fs)
            K2, coa2 = self.time_shift_apFFT(fi[0:767] * fs)
            return K2, coa2, coa1
        else:
            return K1, coa1, 0

    def frequency_measurement(self, fi):
        A, B, C = self.time_shift_apFFT_improved(fi)
        return A + B + C


if __name__ == '__main__':
    c = ApFFTAlgorithm()
    x1 = np.linspace(-383/256, 383/256, 767)
    fi = np.exp(1j * 2 * 6.3 * np.pi * x1)
    f = c.frequency_measurement(fi)
    print(f)
    # plt.plot(np.real(hp))
    # plt.plot(np.imag(hp))
    # plt.plot(np.abs(hp))
    # plt.title('hp')
    # plt.show()
    # hp = np.abs(hp)
    # ppp = np.where(hp==np.max(hp))[0]
    # print(K2, coa2, coa1)

